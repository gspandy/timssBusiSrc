<?xml version="1.0" encoding="UTF-8" ?> 
    <!DOCTYPE mapper 
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.timss.attendance.dao.AbnormityDao">

	<sql id="abnormityBeanField">
		a.id, a.num, a.userName, a.deptId,
		a.category, a.reason, a.siteId, a.deptName,
		a.startDate, a.endDate, a.instantId, a.status,
		a.currentDealUser, a.createBy, a.createDate, a.updateBy, a.updateDate, a.createDay
	</sql>
	
	<!--说明：#{}内的参数，需要与传入的Dept中bean的属性相同，SQL语句中的列名为数据库中的cloumn名称-->
	<insert id="insertAbnormity" parameterType="AbnormityBean">
		<selectKey resultType="int" keyProperty="id" order="BEFORE">
			select SEQ_ATD_ABNORMITY.nextval from dual
		</selectKey>
			insert into ATD_ABNORMITY( id, num, userName,
			deptId, category,
			reason, siteId, deptName, startDate, endDate,createBy,
			createDate,updateBy,updateDate,status )
			values( #{id,jdbcType=NUMERIC}, #{ num,jdbcType=VARCHAR }, #{ userName,jdbcType=VARCHAR}, 
					#{ deptId,jdbcType=VARCHAR}, #{ category,jdbcType=VARCHAR}, 
					#{ reason,jdbcType=VARCHAR}, #{ siteId,jdbcType=VARCHAR}, #{ deptName,jdbcType=VARCHAR}, #{ startDate,jdbcType=TIMESTAMP}, #{ endDate,jdbcType=TIMESTAMP}, #{createBy,jdbcType=VARCHAR}, 
					#{createDate,jdbcType=TIMESTAMP}, #{updateBy,jdbcType=VARCHAR}, #{updateDate,jdbcType=TIMESTAMP}, #{ status,jdbcType=VARCHAR }
			)
	</insert>
	<resultMap id="abnormityMap" type="AbnormityBean">
		<id property="id" column="id"/>
		<result property="num" column="num"/>
		<result property="createDay" column="createDay"/>
		<result property="category" column="category"/>
		<result property="reason" column="reason"/>
		<result property="instantId" column="instantId"/>
		<result property="status" column="status"/>
		<result property="createBy" column="createBy"/>	
		<result property="userName" column="userName"/>	
		<result property="deptId" column="deptId"/>
		<result property="deptName" column="deptName"/>
		<result property="siteId" column="siteId"/>
		<collection property="itemList" column="id" javaType="ArrayList" ofType="AbnormityItemBean" resultMap="abnormityItemMap"/>
	</resultMap>
    <resultMap id="abnormityItemMap" type="AbnormityItemBean">
		<id property="id" column="i_id"/>
		<result property="category" column="i_category"/>
		<result property="startDate" column="i_startDate"/>		
		<result property="endDate" column="i_endDate"/>
		<result property="abnormityId" column="i_abnormityId"/>
		<result property="userName" column="i_userName"/>	
		<result property="userId" column="i_userId"/>
		<result property="deptId" column="i_deptId"/>
		<result property="deptName" column="i_deptName"/>
		<result property="remarks" column="i_remarks"/>		
	</resultMap>
	<select id="queryAbnormityByIdWithItems" parameterType="int" resultMap="abnormityMap">
		select 
			a.id, a.num, a.createDay, a.reason, a.instantId, a.status, a.category,
			a.createBy,a.userName,a.deptId,a.deptName,a.siteId,
		 	i.id i_id,i.category i_category,i.startDate i_startDate,
		 	i.endDate i_endDate,i.abnormityId i_abnormityId,i.userName i_userName,i.userId i_userId,
		 	i.deptId i_deptId,i.deptName i_deptName,i.remarks i_remarks
		 from ATD_abnormity a
		left join ATD_abnormity_ITEM i on a.id = i.abnormityId
		where a.id = #{ id } 
	</select>
	<select id="queryAbnormityById" parameterType="int" resultType="AbnormityBean">
		select <include refid="abnormityBeanField"/> from ATD_ABNORMITY a where id = #{ id }
	</select>
	<update id="updateAbnormity" parameterType="AbnormityBean">
		update ATD_ABNORMITY set 
		category = #{category,jdbcType=VARCHAR},	reason = #{reason,jdbcType=VARCHAR},   startDate = #{startDate,jdbcType=TIMESTAMP},	
		endDate = #{endDate,jdbcType=TIMESTAMP}, updateBy = #{updateBy,jdbcType=VARCHAR},  updateDate = #{updateDate,jdbcType=TIMESTAMP}
		where id = #{ id,jdbcType=NUMERIC }
	</update>
	<update id="updateAbnormityCreateDay" parameterType="AbnormityBean">
		update ATD_ABNORMITY set 
		createDay = #{createDay,jdbcType=TIMESTAMP}, updateBy = #{updateBy,jdbcType=VARCHAR},  
		updateDate = #{updateDate,jdbcType=TIMESTAMP}
		where id = #{ id,jdbcType=NUMERIC }
	</update>	
	<update id="updateOperUserById" parameterType="HashMap"  >
		update ATD_ABNORMITY set 
		status = #{ status,jdbcType=VARCHAR }
		<if test="currentDealUser != null">
		 	,currentDealUser = #{ currentDealUser,jdbcType=VARCHAR }
		</if>
		<if test="instanceId != null">
		 	,INSTANTID = #{ instanceId,jdbcType=VARCHAR }
		</if>
		<if test="updateDate != null">
		 	, updateDate = #{updateDate}
		</if>
		where id = #{ id,jdbcType=NUMERIC }
	</update>
	<select id="queryAbnormityByNum" parameterType="Map" resultType="AbnormityBean">
		select  <include refid="abnormityBeanField"/> from ATD_ABNORMITY a where num = #{ num } and siteId = #{ siteId }
	</select>
	<delete id="deleteAbnormity" parameterType="int">
		delete from ATD_ABNORMITY where id = #{ id }
	</delete>
	
	<select id="queryAbnormityBySearch" resultType="AbnormityBean" >
		select  <include refid="abnormityBeanField"/> 
		from ATD_ABNORMITY a
		where 1 = 1
		<if test="params.itemUserInfo != null and params.itemUserInfo != ''">
			and a.id in (
				select abnormityid
				from atd_abnormity_item i
				where i.userid like '%${ params.itemUserInfo }%' or i.username like '%${ params.itemUserInfo }%'
			)
		</if>
		<if test="params.num != null">
		 	and a.num like '%${ params.num }%'
		</if>
		<if test="params.userName != null">
		 	and a.userName like '%${ params.userName }%'
		</if>
		<if test="params.deptName != null">
		 	and a.deptName like '%${ params.deptName }%'
		</if>
		<if test="params.createDate != null">
		 	and to_char(a.createDate,'YYYY-MM-DD HH24:MI') like '%${ params.createDate }%'
		</if>
		<if test="params.category != null">
		 	and a.category like '%${ params.category }%'
		</if>
		<if test="params.status != null">
		 	and a.status like '%${ params.status }%'
		</if>
		and a.siteId = '${ params.siteId }' and a.status !=  '${ params.statusTemp }'
	</select>
	<select id="queryAbnormityBySiteId" resultType="AbnormityBean">
		select  <include refid="abnormityBeanField"/> from ATD_ABNORMITY a where siteId = '${ params.siteId }'  and status !=  '${ params.status }'
	</select>
	<select id="queryAbnormityByDiffDay" parameterType="Map" resultType="LeaveContainItemVo">
		select abnormity.id id, abnormity.num num, item.userName userName, item.userId createBy,
			item.startDate startDate , item.endDate endDate, item.category category,abnormity.SITEID siteId
		from ATD_ABNORMITY_ITEM item
		left join ATD_ABNORMITY abnormity on item.abnormityId=abnormity.id
		where abnormity.siteid=#{siteId,jdbcType=VARCHAR} and abnormity.status in ${status}
		<if test="userId != null  and userId != '' ">
		 	and item.userId =  #{ userId, jdbcType=VARCHAR }
		</if>
		<choose>
		<when test="startDate != null and startDate != ''">
			<choose>
			<when test="endDate != null and endDate != ''">
				and (
					(item.startDate &gt;= #{startDate} and item.startDate &lt;= #{ endDate } )
					or ( item.startDate &lt;= #{startDate} and item.endDate &gt;= #{ endDate } ) 
					or ( item.endDate &gt;= #{startDate} and item.endDate &lt;= #{ endDate } )
				)
			</when>
			<otherwise>
				and item.endDate &gt;= #{startDate}
			</otherwise>
			</choose>	
		</when>
		<otherwise>
			<if test="endDate != null and endDate != ''">
				and item.startDate &lt;= #{ endDate }
			</if>
		</otherwise>	
		</choose>
		order by item.id desc
	</select>	
	
	<insert id="insertBatchAbnormityItem">
		insert into  ATD_abnormity_ITEM(
			id, category, startDate,
			endDate, abnormityId, 
			userName, userId, deptId, deptName, remarks 
		) 
		select SEQ_ATD_ABNORMITY_ITEM.nextval,temp.* from (
		<foreach collection="itemList" item="item" index="index" separator="union all">
			select 
					#{ item.category, jdbcType=VARCHAR }, #{ item.startDate, jdbcType=TIMESTAMP }, #{ item.endDate, jdbcType=TIMESTAMP }, 
					#{ abnormityId, jdbcType=NUMERIC}, 
					#{ item.userName, jdbcType=VARCHAR}, #{ item.userId, jdbcType=VARCHAR}, #{ item.deptId, jdbcType=VARCHAR}, 
					(select name from sec_organization where org_code=#{ item.deptId, jdbcType=VARCHAR}), 
					#{ item.remarks, jdbcType=VARCHAR}
			from dual
			</foreach>
		) temp
	</insert>
	<update id="updateBatchAbnormityItem" parameterType="java.util.List">
		<foreach collection="itemList" item="item" index="index" open="begin" close=";end;" separator=";">
			update ATD_abnormity_ITEM
			<set> 
				category=#{ item.category, jdbcType=VARCHAR },
				startDate=#{ item.startDate, jdbcType=TIMESTAMP },
				endDate=#{ item.endDate, jdbcType=TIMESTAMP },
				remarks=#{ item.remarks, jdbcType=VARCHAR}
			</set>	
			where id=#{item.id, jdbcType=NUMERIC}
		</foreach>
	</update>
	<delete id="deleteBatchAbnormityItem" parameterType="java.util.List" >
		delete from ATD_abnormity_ITEM where id in 
		<foreach collection="itemList" item="item" index="index" open="(" close=")" separator=",">
		#{item.id,jdbcType=NUMERIC}
		</foreach>
	</delete>
	
	<select id="queryFileByAbnormityId" parameterType="Integer" resultType="String">
		select fileId from ATD_ABNORMITY_FILE where abnormityId = #{ abnormityId }
	</select>
	<insert id="insertBatchAbnormityFile" parameterType="java.util.List">
		insert into  ATD_ABNORMITY_FILE( fileId,abnormityId) 
		select  temp.* from (
		<foreach collection="fileIds" item="item" index="index" separator="union all">
			 select #{item } fileId ,#{abnormityId} abnormityId from dual
		</foreach>
		) temp
	</insert>
	<delete id="deleteFileByAbnormityId" parameterType="int">
		delete from ATD_ABNORMITY_FILE where abnormityId = #{ abnormityId }
	</delete>
</mapper> 